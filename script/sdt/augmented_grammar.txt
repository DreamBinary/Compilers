PROGRAM_ -> PROGRAM { stack[top].code = stack[top].code }
PROGRAM -> STATEMENTLIST { stack[top].code = stack[top].code }
INDEX -> INT { stack[top].type = integer; stack[top].val = stack[top].val;}
INDEX -> VARIABLE { stack[top].type = stack[top].type; stack[top].val = stack[top].val;}
TYPE -> INTEGER
TYPE -> DOUBLE
TYPE -> EPSILON
VARIABLE -> TYPE IDENTIFIER
VARIABLE -> VARIABLE [ INDEX ]
VARIABLE -> VARIABLE [ INDEX ] [ INDEX ]
STATEMENTLIST -> STATEMENT
STATEMENTLIST -> STATEMENTLIST STATEMENT
STATEMENTLIST -> EPSILON
STATEMENT -> VARIABLE
STATEMENT -> VARIABLE = ASSIGN
STATEMENT -> EXPRESSIONLIST
STATEMENT -> IFSTMT
STATEMENT -> REPEAT { STATEMENTLIST } UNTIL ( EXPRESSION )
STATEMENT -> FOR ( EXPRESSIONLISTVAR ) { STATEMENTLIST }
STATEMENT -> FOR ( EXPRESSIONLISTVAR ) STATEMENT
STATEMENT -> RETURN EXPRESSION
STATEMENT -> BREAK ;
STATEMENT -> ;
STATEMENT -> #
ASSIGN -> INT
ASSIGN -> EXPRESSION
ASSIGN -> IDENTIFIER ( EXPRESSIONLIST )
ASSIGN -> FUN
FUN -> FUNCTION ( EXPRESSIONLIST ) { STATEMENTLIST }
FUN -> FUNCTION ( EXPRESSIONLIST )
IFSTMT -> IF ( EXPRESSION ) IFBLOCK ELIFSTMT
ELIFSTMT -> ELSEIF ( EXPRESSION ) IFBLOCK ELIFSTMT
ELIFSTMT -> ELSE IFBLOCK
ELIFSTMT -> EPSILON
IFBLOCK -> STATEMENTLIST
IFBLOCK -> { STATEMENTLIST }
EXPRESSIONLIST -> EXPRESSION
EXPRESSIONLIST -> EXPRESSIONLIST , EXPRESSION
EXPRESSIONLISTVAR -> EXPRESSION
EXPRESSIONLISTVAR -> EXPRESSIONLISTVAR ; EXPRESSION
EXPRESSION -> VARIABLE
EXPRESSION -> INT
EXPRESSION -> FLOAT
EXPRESSION -> IDENTIFIER
EXPRESSION -> EXPRESSION = EXPRESSION
EXPRESSION -> VARIABLE ( EXPRESSIONLIST )
EXPRESSION -> EXPRESSION + EXPRESSION
EXPRESSION -> EXPRESSION - EXPRESSION
EXPRESSION -> EXPRESSION * EXPRESSION
EXPRESSION -> EXPRESSION / EXPRESSION
EXPRESSION -> EXPRESSION < EXPRESSION
EXPRESSION -> EXPRESSION > EXPRESSION
EXPRESSION -> EXPRESSION >= EXPRESSION
EXPRESSION -> EXPRESSION <= EXPRESSION
EXPRESSION -> EXPRESSION == EXPRESSION
EXPRESSION -> EXPRESSION != EXPRESSION
EXPRESSION -> EXPRESSION && EXPRESSION
EXPRESSION -> EXPRESSION || EXPRESSION
EXPRESSION -> EXPRESSION ++
EXPRESSION -> EXPRESSION --
EXPRESSION -> ( EXPRESSION )
