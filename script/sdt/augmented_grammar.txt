PROGRAM_ -> PROGRAM { PROGRAM_.code = PROGRAM.code }

PROGRAM -> STATEMENTLIST { PROGRAM.code = STATEMENTLIST.code }

INDEX -> INT { INDEX.type = integer, INDEX.value = INT.value }

INDEX -> IDENTIFIER { INDEX.type = IDENTIFIER.type, INDEX.value = IDENTIFIER.value }

TYPE -> INTEGER { TYPE.type = integer }

TYPE -> DOUBLE { TYPE.type = double }

TYPE -> EPSILON { TYPE.type = none }

VARIABLE -> TYPE IDENTIFIER {
    VARIABLE.type = TYPE.type,
    VARIABLE.value = IDENTIFIER.value
}

VARIABLE -> VARIABLE [ INDEX ] {
    VARIABLE.type = ARRAY(VARIABLE.type),
    VARIABLE.index = INDEX.value
}

VARIABLE -> VARIABLE [ INDEX ] [ INDEX ] {
    VARIABLE.type = ARRAY(VARIABLE.type),
    VARIABLE.index1 = INDEX1.value,
    VARIABLE.index2 = INDEX2.value
}

STATEMENTLIST -> STATEMENT {
    STATEMENTLIST.code = STATEMENT.code
}

STATEMENTLIST -> STATEMENTLIST STATEMENT {
    STATEMENTLIST.code = concatenate(STATEMENTLIST1.code, STATEMENT.code)
}

STATEMENTLIST -> EPSILON { STATEMENTLIST.code = "" }

STATEMENT -> VARIABLE { STATEMENT.code = VARIABLE.code }

STATEMENT -> VARIABLE = ASSIGN { STATEMENT.code = VARIABLE.code + ASSIGN.code }

STATEMENT -> EXPRESSIONLIST { STATEMENT.code = EXPRESSIONLIST.code }

STATEMENT -> IFSTMT { STATEMENT.code = IFSTMT.code }

STATEMENT -> REPEAT { STATEMENTLIST } UNTIL ( EXPRESSION ) {
    STATEMENT.code = "repeat " + STATEMENTLIST.code + " until (" + EXPRESSION.code + ");"
}

STATEMENT -> FOR ( EXPRESSIONLISTVAR ) { STATEMENTLIST } {
    STATEMENT.code = "for (" + EXPRESSIONLISTVAR.code + ") {" + STATEMENTLIST.code + "}"
}

STATEMENT -> FOR ( EXPRESSIONLISTVAR ) STATEMENT {
    STATEMENT.code = "for (" + EXPRESSIONLISTVAR.code + ") " + STATEMENT.code
}

STATEMENT -> RETURN EXPRESSION {
    STATEMENT.code = "return " + EXPRESSION.code + ";"
}

STATEMENT -> BREAK ; { STATEMENT.code = "break;" }

STATEMENT -> ; { STATEMENT.code = ";" }

STATEMENT -> # { STATEMENT.code = "#" }

ASSIGN -> INT { ASSIGN.code = INT.value }

ASSIGN -> EXPRESSION { ASSIGN.code = EXPRESSION.code }

ASSIGN -> IDENTIFIER ( EXPRESSIONLIST ) {
    ASSIGN.code = IDENTIFIER.value + "(" + EXPRESSIONLIST.code + ")"
}

ASSIGN -> FUN { ASSIGN.code = FUN.code }

FUN -> FUNCTION ( EXPRESSIONLIST ) { STATEMENTLIST } {
    FUN.code = "function " + FUNCTION + "(" + EXPRESSIONLIST.code + ") {" + STATEMENTLIST.code + "}"
}

FUN -> FUNCTION ( EXPRESSIONLIST ) { FUN.code = "function " + FUNCTION + "(" + EXPRESSIONLIST.code + ")" }

IFSTMT -> IF ( EXPRESSION ) IFBLOCK ELIFSTMT {
    IFSTMT.code = "if (" + EXPRESSION.code + ") " + IFBLOCK.code + ELIFSTMT.code
}

ELIFSTMT -> ELSEIF ( EXPRESSION ) IFBLOCK ELIFSTMT {
    ELIFSTMT.code = " else if (" + EXPRESSION.code + ") " + IFBLOCK.code + ELIFSTMT.code
}

ELIFSTMT -> ELSE IFBLOCK {
    ELIFSTMT.code = " else " + IFBLOCK.code
}

ELIFSTMT -> EPSILON { ELIFSTMT.code = "" }

IFBLOCK -> STATEMENTLIST { IFBLOCK.code = STATEMENTLIST.code }

IFBLOCK -> { STATEMENTLIST } { IFBLOCK.code = "{" + STATEMENTLIST.code + "}" }

EXPRESSIONLIST -> EXPRESSION { EXPRESSIONLIST.code = EXPRESSION.code }

EXPRESSIONLIST -> EXPRESSIONLIST , EXPRESSION {
    EXPRESSIONLIST.code = EXPRESSIONLIST1.code + ", " + EXPRESSION.code
}

EXPRESSIONLISTVAR -> EXPRESSION { EXPRESSIONLISTVAR.code = EXPRESSION.code }

EXPRESSIONLISTVAR -> EXPRESSIONLISTVAR ; EXPRESSION {
    EXPRESSIONLISTVAR.code = EXPRESSIONLISTVAR.code + "; " + EXPRESSION.code
}

EXPRESSION -> VARIABLE { EXPRESSION.code = VARIABLE.code }

EXPRESSION -> INT { EXPRESSION.code = INT.value }

EXPRESSION -> FLOAT { EXPRESSION.code = FLOAT.value }

EXPRESSION -> IDENTIFIER { EXPRESSION.code = IDENTIFIER.value }

EXPRESSION -> EXPRESSION = EXPRESSION {
    EXPRESSION.code = EXPRESSION1.code + " = " + EXPRESSION2.code
}

EXPRESSION -> VARIABLE ( EXPRESSIONLIST ) {
    EXPRESSION.code = VARIABLE.value + "(" + EXPRESSIONLIST.code + ")"
}

EXPRESSION -> EXPRESSION + EXPRESSION {
    EXPRESSION.code = EXPRESSION1.code + " + " + EXPRESSION2.code
}

EXPRESSION -> EXPRESSION - EXPRESSION {
    EXPRESSION.code = EXPRESSION1.code + " - " + EXPRESSION2.code
}

EXPRESSION -> EXPRESSION * EXPRESSION {
    EXPRESSION.code = EXPRESSION1.code + " * " + EXPRESSION2.code
}

EXPRESSION -> EXPRESSION / EXPRESSION {
    EXPRESSION.code = EXPRESSION1.code + " / " + EXPRESSION2.code
}

EXPRESSION -> EXPRESSION < EXPRESSION {
    EXPRESSION.code = EXPRESSION1.code + " < " + EXPRESSION2.code
}

EXPRESSION -> EXPRESSION > EXPRESSION {
    EXPRESSION.code = EXPRESSION1.code + " > " + EXPRESSION2.code
}

EXPRESSION -> EXPRESSION >= EXPRESSION {
    EXPRESSION.code = EXPRESSION1.code + " >= " + EXPRESSION2.code
}

EXPRESSION -> EXPRESSION <= EXPRESSION {
    EXPRESSION.code = EXPRESSION1.code + " <= " + EXPRESSION2.code
}

EXPRESSION -> EXPRESSION == EXPRESSION {
    EXPRESSION.code = EXPRESSION1.code + " == " + EXPRESSION2.code
}

EXPRESSION -> EXPRESSION != EXPRESSION {
    EXPRESSION.code = EXPRESSION1.code + " != " + EXPRESSION2.code
}

EXPRESSION -> EXPRESSION && EXPRESSION {
    EXPRESSION.code = EXPRESSION1.code + " && " + EXPRESSION2.code
}

EXPRESSION -> EXPRESSION || EXPRESSION {
    EXPRESSION.code = EXPRESSION1.code + " || " + EXPRESSION2.code
}

EXPRESSION -> EXPRESSION ++ { EXPRESSION.code = EXPRESSION.code + "++" }

EXPRESSION -> EXPRESSION -- { EXPRESSION.code = EXPRESSION.code + "--" }

EXPRESSION -> ( EXPRESSION ) { EXPRESSION.code = "(" + EXPRESSION.code + ")" }
