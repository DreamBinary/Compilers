# program -> function | variable
# variable -> type identifier | type identifier = expression | type identifier = function | type identifier , variable | type identifier [ integer ] | type identifier [ integer ] [ integer ]
# function -> type identifier ( ) { statement } | type identifier ( ) | type identifier ( expression ) { statement } | type identifier ( expression ) |  type identifier ( expression , expression ) { statement } |  type identifier ( expression , expression ) | type identifier ( expression , expression , expression ) { statement } | type identifier ( expression , expression , expression )
# type -> integer | double | epsilon
# statement -> variable ; |  if ( expression ) statement |  if ( expression ) statement else statement | if ( expression ) statement else if ( expression ) statement | repeat { statement } until ( expression ) | for ( expression ; expression ; expression ) { statement } | for ( expression ; expression ; expression ) statement | return expression ; | comment statement | statement statement | epsilon | ; | break
# expression -> variable | function | expression + expression | expression - expression | expression * expression | expression / expression | expression < expression | expression > expression | expression == expression | expression != expression | expression && expression | expression || expression | expression ++ | expression -- | ( expression )
# digit -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
# int -> digit | digit int
# float -> int . int | . int | int .
# letter -> a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z | A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z
# identifier -> letter | letter identifier | letter digit | letter digit identifier
# comment -> # | # letter | # letter comment | # digit | # digit comment | # digit letter | # digit letter comment


program -> variable
variable -> variable ; | type identifier | type identifier = expression | type identifier = function | type identifier , variable | type identifier [ integer ] | type identifier [ integer ] [ integer ]
function -> type identifier ( expressionList ) { statementList } | type identifier ( expressionList )
type -> integer | double | epsilon
statementList -> statement | statementList statement
statement -> variable |  if ( expression ) statement |  if ( expression ) statement else statement | if ( expression ) statement else if ( expression ) statement | repeat { statementList } until ( expression ) | for ( expressionList ) { statementList } | for ( expressionList ) statement | return expression ; | break ; | epsilon | ;
expressionList -> expression | expressionList ; expression | expressionList , expression
expression -> variable | function | expression + expression | expression - expression | expression * expression | expression / expression | expression < expression | expression > expression | expression == expression | expression != expression | expression && expression | expression || expression | expression ++ | expression -- | ( expression )
digit -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
int -> digit | digit int
float -> int . int | . int | int .
letter -> a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z | A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z
identifier -> letter | letter identifier | letter digit | letter digit identifier
comment -> # | # letter | # letter comment | # digit | # digit comment | # digit letter | # digit letter comment
