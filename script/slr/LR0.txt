==>> state: 0
PROGRAM_ ->  . PROGRAM  index: 0 1    goto: 1
PROGRAM ->  . STATEMENTLIST  index: 0 1    goto: 17
STATEMENTLIST ->  . STATEMENT  index: 0 1    goto: 3
STATEMENTLIST ->  . STATEMENTLIST STATEMENT  index: 0 2    goto: 17
STATEMENTLIST -> EPSILON .   index: 1 1    goto: -2
STATEMENT ->  . VARIABLE  index: 0 1    goto: 2
STATEMENT ->  . VARIABLE = ASSIGN  index: 0 3    goto: 2
STATEMENT ->  . EXPRESSIONLIST  index: 0 1    goto: 18
STATEMENT ->  . IFSTMT  index: 0 1    goto: 4
STATEMENT ->  . REPEAT { STATEMENTLIST } UNTIL ( CONDITION )  index: 0 8    goto: 13
STATEMENT ->  . DO { LABEL STATEMENTLIST } WHILE ( LABEL CONDITION )  index: 0 10    goto: 24
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) { STATEMENTLIST }  index: 0 7    goto: 14
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) STATEMENT  index: 0 5    goto: 14
STATEMENT ->  . RETURN EXPRESSION  index: 0 2    goto: 16
STATEMENT ->  . BREAK ;  index: 0 2    goto: 15
STATEMENT ->  . ;  index: 0 1    goto: 26
STATEMENT ->  . #  index: 0 1    goto: 27
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 2
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 2
EXPRESSIONLIST ->  . EXPRESSION  index: 0 1    goto: 5
EXPRESSIONLIST ->  . EXPRESSIONLIST , EXPRESSION  index: 0 3    goto: 18
IFSTMT ->  . IF ( CONDITION ) LABEL IFBLOCK LABEL ELIFSTMT  index: 0 8    goto: 12
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
EXPRESSION ->  . COMPUTEEXPR  index: 0 1    goto: 19
EXPRESSION ->  . PARTEXPR  index: 0 1    goto: 22
EXPRESSION ->  . CONDITION  index: 0 1    goto: 21
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 22
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 22
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 2
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 2
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 19
CONDITION ->  . COMPAREEXPR  index: 0 1    goto: 20
CONDITION ->  . BOOLEXPR  index: 0 1    goto: 23
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 22
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 23
Reduce: STATEMENTLIST -> EPSILON
Reduce: TYPE -> EPSILON
==>> state: 1
PROGRAM_ -> PROGRAM .   index: 1 1    goto: -2
Reduce: PROGRAM_ -> PROGRAM
==>> state: 2
STATEMENT -> VARIABLE .   index: 1 1    goto: -2
STATEMENT -> VARIABLE . = ASSIGN  index: 1 3    goto: 28
VARIABLE -> VARIABLE . [ INDEX ]  index: 1 4    goto: 30
VARIABLE -> VARIABLE . [ INDEX ] [ INDEX ]  index: 1 7    goto: 30
PARTEXPR -> VARIABLE .   index: 1 1    goto: -2
PARTEXPR -> VARIABLE . ( EXPRESSIONLIST )  index: 1 4    goto: 29
Reduce: STATEMENT -> VARIABLE
Reduce: PARTEXPR -> VARIABLE
==>> state: 3
STATEMENTLIST -> STATEMENT .   index: 1 1    goto: -2
Reduce: STATEMENTLIST -> STATEMENT
==>> state: 4
STATEMENT -> IFSTMT .   index: 1 1    goto: -2
Reduce: STATEMENT -> IFSTMT
==>> state: 5
EXPRESSIONLIST -> EXPRESSION .   index: 1 1    goto: -2
Reduce: EXPRESSIONLIST -> EXPRESSION
==>> state: 6
VARIABLE -> TYPE . IDENTIFIER  index: 1 2    goto: 31
==>> state: 7
TYPE -> INTEGER .   index: 1 1    goto: -2
Reduce: TYPE -> INTEGER
==>> state: 8
PARTEXPR -> INT .   index: 1 1    goto: -2
Reduce: PARTEXPR -> INT
==>> state: 9
TYPE -> DOUBLE .   index: 1 1    goto: -2
Reduce: TYPE -> DOUBLE
==>> state: 10
PARTEXPR -> FLOAT .   index: 1 1    goto: -2
Reduce: PARTEXPR -> FLOAT
==>> state: 11
PARTEXPR -> IDENTIFIER .   index: 1 1    goto: -2
Reduce: PARTEXPR -> IDENTIFIER
==>> state: 12
IFSTMT -> IF . ( CONDITION ) LABEL IFBLOCK LABEL ELIFSTMT  index: 1 8    goto: 32
==>> state: 13
STATEMENT -> REPEAT . { STATEMENTLIST } UNTIL ( CONDITION )  index: 1 8    goto: 33
==>> state: 14
STATEMENT -> FOR . ( EXPRESSIONLISTVAR ) { STATEMENTLIST }  index: 1 7    goto: 34
STATEMENT -> FOR . ( EXPRESSIONLISTVAR ) STATEMENT  index: 1 5    goto: 34
==>> state: 15
STATEMENT -> BREAK . ;  index: 1 2    goto: 35
==>> state: 16
STATEMENT -> RETURN . EXPRESSION  index: 1 2    goto: 37
EXPRESSION ->  . COMPUTEEXPR  index: 0 1    goto: 19
EXPRESSION ->  . PARTEXPR  index: 0 1    goto: 22
EXPRESSION ->  . CONDITION  index: 0 1    goto: 21
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 22
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 22
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 36
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 36
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 19
CONDITION ->  . COMPAREEXPR  index: 0 1    goto: 20
CONDITION ->  . BOOLEXPR  index: 0 1    goto: 23
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 36
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 36
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 22
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 23
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
Reduce: TYPE -> EPSILON
==>> state: 17
PROGRAM -> STATEMENTLIST .   index: 1 1    goto: -2
STATEMENTLIST -> STATEMENTLIST . STATEMENT  index: 1 2    goto: 38
STATEMENT ->  . VARIABLE  index: 0 1    goto: 2
STATEMENT ->  . VARIABLE = ASSIGN  index: 0 3    goto: 2
STATEMENT ->  . EXPRESSIONLIST  index: 0 1    goto: 18
STATEMENT ->  . IFSTMT  index: 0 1    goto: 4
STATEMENT ->  . REPEAT { STATEMENTLIST } UNTIL ( CONDITION )  index: 0 8    goto: 13
STATEMENT ->  . DO { LABEL STATEMENTLIST } WHILE ( LABEL CONDITION )  index: 0 10    goto: 24
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) { STATEMENTLIST }  index: 0 7    goto: 14
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) STATEMENT  index: 0 5    goto: 14
STATEMENT ->  . RETURN EXPRESSION  index: 0 2    goto: 16
STATEMENT ->  . BREAK ;  index: 0 2    goto: 15
STATEMENT ->  . ;  index: 0 1    goto: 26
STATEMENT ->  . #  index: 0 1    goto: 27
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 2
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 2
EXPRESSIONLIST ->  . EXPRESSION  index: 0 1    goto: 5
EXPRESSIONLIST ->  . EXPRESSIONLIST , EXPRESSION  index: 0 3    goto: 18
IFSTMT ->  . IF ( CONDITION ) LABEL IFBLOCK LABEL ELIFSTMT  index: 0 8    goto: 12
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
EXPRESSION ->  . COMPUTEEXPR  index: 0 1    goto: 19
EXPRESSION ->  . PARTEXPR  index: 0 1    goto: 22
EXPRESSION ->  . CONDITION  index: 0 1    goto: 21
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 22
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 22
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 2
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 2
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 19
CONDITION ->  . COMPAREEXPR  index: 0 1    goto: 20
CONDITION ->  . BOOLEXPR  index: 0 1    goto: 23
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 22
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 23
Reduce: PROGRAM -> STATEMENTLIST
Reduce: TYPE -> EPSILON
==>> state: 18
STATEMENT -> EXPRESSIONLIST .   index: 1 1    goto: -2
EXPRESSIONLIST -> EXPRESSIONLIST . , EXPRESSION  index: 1 3    goto: 39
Reduce: STATEMENT -> EXPRESSIONLIST
==>> state: 19
EXPRESSION -> COMPUTEEXPR .   index: 1 1    goto: -2
PARTEXPR -> COMPUTEEXPR .   index: 1 1    goto: -2
Reduce: EXPRESSION -> COMPUTEEXPR
Reduce: PARTEXPR -> COMPUTEEXPR
==>> state: 20
CONDITION -> COMPAREEXPR .   index: 1 1    goto: -2
BOOLEXPR -> COMPAREEXPR . && COMPAREEXPR  index: 1 3    goto: 40
BOOLEXPR -> COMPAREEXPR . || COMPAREEXPR  index: 1 3    goto: 41
Reduce: CONDITION -> COMPAREEXPR
==>> state: 21
EXPRESSION -> CONDITION .   index: 1 1    goto: -2
Reduce: EXPRESSION -> CONDITION
==>> state: 22
EXPRESSION -> PARTEXPR .   index: 1 1    goto: -2
COMPUTEEXPR -> PARTEXPR . + PARTEXPR  index: 1 3    goto: 42
COMPUTEEXPR -> PARTEXPR . - PARTEXPR  index: 1 3    goto: 43
COMPUTEEXPR -> PARTEXPR . * PARTEXPR  index: 1 3    goto: 44
COMPUTEEXPR -> PARTEXPR . / PARTEXPR  index: 1 3    goto: 45
COMPUTEEXPR -> PARTEXPR . ++  index: 1 2    goto: 52
COMPUTEEXPR -> PARTEXPR . --  index: 1 2    goto: 53
COMPAREEXPR -> PARTEXPR . < PARTEXPR  index: 1 3    goto: 46
COMPAREEXPR -> PARTEXPR . > PARTEXPR  index: 1 3    goto: 47
COMPAREEXPR -> PARTEXPR . <= PARTEXPR  index: 1 3    goto: 48
COMPAREEXPR -> PARTEXPR . >= PARTEXPR  index: 1 3    goto: 49
COMPAREEXPR -> PARTEXPR . == PARTEXPR  index: 1 3    goto: 50
COMPAREEXPR -> PARTEXPR . != PARTEXPR  index: 1 3    goto: 51
Reduce: EXPRESSION -> PARTEXPR
==>> state: 23
CONDITION -> BOOLEXPR .   index: 1 1    goto: -2
BOOLEXPR -> BOOLEXPR . BOOLEXPR  index: 1 2    goto: 57
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 55
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 55
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 57
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 56
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 36
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 36
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 54
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 36
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 36
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 56
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 56
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
Reduce: CONDITION -> BOOLEXPR
Reduce: TYPE -> EPSILON
==>> state: 24
STATEMENT -> DO . { LABEL STATEMENTLIST } WHILE ( LABEL CONDITION )  index: 1 10    goto: 58
==>> state: 25
PARTEXPR -> ( . EXPRESSION )  index: 1 3    goto: 59
EXPRESSION ->  . COMPUTEEXPR  index: 0 1    goto: 19
EXPRESSION ->  . PARTEXPR  index: 0 1    goto: 22
EXPRESSION ->  . CONDITION  index: 0 1    goto: 21
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 22
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 22
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 36
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 36
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 19
CONDITION ->  . COMPAREEXPR  index: 0 1    goto: 20
CONDITION ->  . BOOLEXPR  index: 0 1    goto: 23
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 36
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 36
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 22
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 23
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
Reduce: TYPE -> EPSILON
==>> state: 26
STATEMENT -> ; .   index: 1 1    goto: -2
Reduce: STATEMENT -> ;
==>> state: 27
STATEMENT -> # .   index: 1 1    goto: -2
Reduce: STATEMENT -> #
==>> state: 28
STATEMENT -> VARIABLE = . ASSIGN  index: 2 3    goto: 65
ASSIGN ->  . INT  index: 0 1    goto: 63
ASSIGN ->  . EXPRESSION  index: 0 1    goto: 62
ASSIGN ->  . IDENTIFIER ( EXPRESSIONLIST )  index: 0 4    goto: 64
ASSIGN ->  . FUN  index: 0 1    goto: 60
EXPRESSION ->  . COMPUTEEXPR  index: 0 1    goto: 19
EXPRESSION ->  . PARTEXPR  index: 0 1    goto: 22
EXPRESSION ->  . CONDITION  index: 0 1    goto: 21
FUN ->  . FUNCTION ( EXPRESSIONLIST ) { STATEMENTLIST }  index: 0 7    goto: 61
FUN ->  . FUNCTION ( EXPRESSIONLIST )  index: 0 4    goto: 61
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 22
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 22
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 36
PARTEXPR ->  . INT  index: 0 1    goto: 63
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 64
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 36
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 19
CONDITION ->  . COMPAREEXPR  index: 0 1    goto: 20
CONDITION ->  . BOOLEXPR  index: 0 1    goto: 23
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 36
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 36
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 22
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 23
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
Reduce: TYPE -> EPSILON
==>> state: 29
PARTEXPR -> VARIABLE ( . EXPRESSIONLIST )  index: 2 4    goto: 66
EXPRESSIONLIST ->  . EXPRESSION  index: 0 1    goto: 5
EXPRESSIONLIST ->  . EXPRESSIONLIST , EXPRESSION  index: 0 3    goto: 66
EXPRESSION ->  . COMPUTEEXPR  index: 0 1    goto: 19
EXPRESSION ->  . PARTEXPR  index: 0 1    goto: 22
EXPRESSION ->  . CONDITION  index: 0 1    goto: 21
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 22
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 22
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 36
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 36
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 19
CONDITION ->  . COMPAREEXPR  index: 0 1    goto: 20
CONDITION ->  . BOOLEXPR  index: 0 1    goto: 23
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 36
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 36
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 22
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 23
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
Reduce: TYPE -> EPSILON
==>> state: 30
VARIABLE -> VARIABLE [ . INDEX ]  index: 2 4    goto: 69
VARIABLE -> VARIABLE [ . INDEX ] [ INDEX ]  index: 2 7    goto: 69
INDEX ->  . INT  index: 0 1    goto: 68
INDEX ->  . VARIABLE  index: 0 1    goto: 67
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 67
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 67
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
Reduce: TYPE -> EPSILON
==>> state: 31
VARIABLE -> TYPE IDENTIFIER .   index: 2 2    goto: -2
Reduce: VARIABLE -> TYPE IDENTIFIER
==>> state: 32
IFSTMT -> IF ( . CONDITION ) LABEL IFBLOCK LABEL ELIFSTMT  index: 2 8    goto: 70
CONDITION ->  . COMPAREEXPR  index: 0 1    goto: 20
CONDITION ->  . BOOLEXPR  index: 0 1    goto: 23
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 56
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 23
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 36
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 36
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 54
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 36
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 36
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 56
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 56
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
Reduce: TYPE -> EPSILON
==>> state: 33
STATEMENT -> REPEAT { . STATEMENTLIST } UNTIL ( CONDITION )  index: 2 8    goto: 71
STATEMENTLIST ->  . STATEMENT  index: 0 1    goto: 3
STATEMENTLIST ->  . STATEMENTLIST STATEMENT  index: 0 2    goto: 71
STATEMENTLIST -> EPSILON .   index: 1 1    goto: -2
STATEMENT ->  . VARIABLE  index: 0 1    goto: 2
STATEMENT ->  . VARIABLE = ASSIGN  index: 0 3    goto: 2
STATEMENT ->  . EXPRESSIONLIST  index: 0 1    goto: 18
STATEMENT ->  . IFSTMT  index: 0 1    goto: 4
STATEMENT ->  . REPEAT { STATEMENTLIST } UNTIL ( CONDITION )  index: 0 8    goto: 13
STATEMENT ->  . DO { LABEL STATEMENTLIST } WHILE ( LABEL CONDITION )  index: 0 10    goto: 24
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) { STATEMENTLIST }  index: 0 7    goto: 14
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) STATEMENT  index: 0 5    goto: 14
STATEMENT ->  . RETURN EXPRESSION  index: 0 2    goto: 16
STATEMENT ->  . BREAK ;  index: 0 2    goto: 15
STATEMENT ->  . ;  index: 0 1    goto: 26
STATEMENT ->  . #  index: 0 1    goto: 27
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 2
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 2
EXPRESSIONLIST ->  . EXPRESSION  index: 0 1    goto: 5
EXPRESSIONLIST ->  . EXPRESSIONLIST , EXPRESSION  index: 0 3    goto: 18
IFSTMT ->  . IF ( CONDITION ) LABEL IFBLOCK LABEL ELIFSTMT  index: 0 8    goto: 12
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
EXPRESSION ->  . COMPUTEEXPR  index: 0 1    goto: 19
EXPRESSION ->  . PARTEXPR  index: 0 1    goto: 22
EXPRESSION ->  . CONDITION  index: 0 1    goto: 21
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 22
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 22
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 2
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 2
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 19
CONDITION ->  . COMPAREEXPR  index: 0 1    goto: 20
CONDITION ->  . BOOLEXPR  index: 0 1    goto: 23
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 22
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 23
Reduce: STATEMENTLIST -> EPSILON
Reduce: TYPE -> EPSILON
==>> state: 34
STATEMENT -> FOR ( . EXPRESSIONLISTVAR ) { STATEMENTLIST }  index: 2 7    goto: 73
STATEMENT -> FOR ( . EXPRESSIONLISTVAR ) STATEMENT  index: 2 5    goto: 73
EXPRESSIONLISTVAR ->  . EXPRESSION  index: 0 1    goto: 72
EXPRESSIONLISTVAR ->  . EXPRESSIONLISTVAR ; EXPRESSION  index: 0 3    goto: 73
EXPRESSION ->  . COMPUTEEXPR  index: 0 1    goto: 19
EXPRESSION ->  . PARTEXPR  index: 0 1    goto: 22
EXPRESSION ->  . CONDITION  index: 0 1    goto: 21
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 22
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 22
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 36
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 36
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 19
CONDITION ->  . COMPAREEXPR  index: 0 1    goto: 20
CONDITION ->  . BOOLEXPR  index: 0 1    goto: 23
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 36
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 36
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 22
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 23
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
Reduce: TYPE -> EPSILON
==>> state: 35
STATEMENT -> BREAK ; .   index: 2 2    goto: -2
Reduce: STATEMENT -> BREAK ;
==>> state: 36
PARTEXPR -> VARIABLE .   index: 1 1    goto: -2
PARTEXPR -> VARIABLE . ( EXPRESSIONLIST )  index: 1 4    goto: 29
VARIABLE -> VARIABLE . [ INDEX ]  index: 1 4    goto: 30
VARIABLE -> VARIABLE . [ INDEX ] [ INDEX ]  index: 1 7    goto: 30
Reduce: PARTEXPR -> VARIABLE
==>> state: 37
STATEMENT -> RETURN EXPRESSION .   index: 2 2    goto: -2
Reduce: STATEMENT -> RETURN EXPRESSION
==>> state: 38
STATEMENTLIST -> STATEMENTLIST STATEMENT .   index: 2 2    goto: -2
Reduce: STATEMENTLIST -> STATEMENTLIST STATEMENT
==>> state: 39
EXPRESSIONLIST -> EXPRESSIONLIST , . EXPRESSION  index: 2 3    goto: 74
EXPRESSION ->  . COMPUTEEXPR  index: 0 1    goto: 19
EXPRESSION ->  . PARTEXPR  index: 0 1    goto: 22
EXPRESSION ->  . CONDITION  index: 0 1    goto: 21
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 22
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 22
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 36
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 36
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 19
CONDITION ->  . COMPAREEXPR  index: 0 1    goto: 20
CONDITION ->  . BOOLEXPR  index: 0 1    goto: 23
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 36
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 36
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 22
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 23
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
Reduce: TYPE -> EPSILON
==>> state: 40
BOOLEXPR -> COMPAREEXPR && . COMPAREEXPR  index: 2 3    goto: 75
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 56
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 36
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 36
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 54
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 36
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 36
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 56
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 56
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
Reduce: TYPE -> EPSILON
==>> state: 41
BOOLEXPR -> COMPAREEXPR || . COMPAREEXPR  index: 2 3    goto: 76
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 56
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 36
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 36
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 54
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 36
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 36
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 56
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 56
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
Reduce: TYPE -> EPSILON
==>> state: 42
COMPUTEEXPR -> PARTEXPR + . PARTEXPR  index: 2 3    goto: 77
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 36
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 36
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 54
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 36
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 36
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 77
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 77
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 77
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 77
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 77
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 77
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
Reduce: TYPE -> EPSILON
==>> state: 43
COMPUTEEXPR -> PARTEXPR - . PARTEXPR  index: 2 3    goto: 78
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 36
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 36
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 54
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 36
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 36
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 78
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 78
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 78
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 78
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 78
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 78
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
Reduce: TYPE -> EPSILON
==>> state: 44
COMPUTEEXPR -> PARTEXPR * . PARTEXPR  index: 2 3    goto: 79
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 36
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 36
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 54
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 36
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 36
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 79
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 79
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 79
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 79
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 79
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 79
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
Reduce: TYPE -> EPSILON
==>> state: 45
COMPUTEEXPR -> PARTEXPR / . PARTEXPR  index: 2 3    goto: 80
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 36
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 36
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 54
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 36
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 36
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 80
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 80
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 80
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 80
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 80
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 80
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
Reduce: TYPE -> EPSILON
==>> state: 46
COMPAREEXPR -> PARTEXPR < . PARTEXPR  index: 2 3    goto: 81
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 36
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 36
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 54
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 36
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 36
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 81
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 81
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 81
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 81
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 81
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 81
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
Reduce: TYPE -> EPSILON
==>> state: 47
COMPAREEXPR -> PARTEXPR > . PARTEXPR  index: 2 3    goto: 82
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 36
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 36
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 54
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 36
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 36
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 82
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 82
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 82
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 82
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 82
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 82
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
Reduce: TYPE -> EPSILON
==>> state: 48
COMPAREEXPR -> PARTEXPR <= . PARTEXPR  index: 2 3    goto: 83
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 36
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 36
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 54
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 36
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 36
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 83
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 83
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 83
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 83
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 83
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 83
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
Reduce: TYPE -> EPSILON
==>> state: 49
COMPAREEXPR -> PARTEXPR >= . PARTEXPR  index: 2 3    goto: 84
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 36
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 36
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 54
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 36
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 36
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 84
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 84
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 84
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 84
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 84
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 84
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
Reduce: TYPE -> EPSILON
==>> state: 50
COMPAREEXPR -> PARTEXPR == . PARTEXPR  index: 2 3    goto: 85
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 36
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 36
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 54
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 36
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 36
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 85
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 85
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 85
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 85
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 85
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 85
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
Reduce: TYPE -> EPSILON
==>> state: 51
COMPAREEXPR -> PARTEXPR != . PARTEXPR  index: 2 3    goto: 86
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 36
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 36
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 54
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 36
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 36
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 86
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 86
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 86
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 86
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 86
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 86
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
Reduce: TYPE -> EPSILON
==>> state: 52
COMPUTEEXPR -> PARTEXPR ++ .   index: 2 2    goto: -2
Reduce: COMPUTEEXPR -> PARTEXPR ++
==>> state: 53
COMPUTEEXPR -> PARTEXPR -- .   index: 2 2    goto: -2
Reduce: COMPUTEEXPR -> PARTEXPR --
==>> state: 54
PARTEXPR -> COMPUTEEXPR .   index: 1 1    goto: -2
Reduce: PARTEXPR -> COMPUTEEXPR
==>> state: 55
BOOLEXPR -> COMPAREEXPR . && COMPAREEXPR  index: 1 3    goto: 40
BOOLEXPR -> COMPAREEXPR . || COMPAREEXPR  index: 1 3    goto: 41
==>> state: 56
COMPAREEXPR -> PARTEXPR . < PARTEXPR  index: 1 3    goto: 46
COMPAREEXPR -> PARTEXPR . > PARTEXPR  index: 1 3    goto: 47
COMPAREEXPR -> PARTEXPR . <= PARTEXPR  index: 1 3    goto: 48
COMPAREEXPR -> PARTEXPR . >= PARTEXPR  index: 1 3    goto: 49
COMPAREEXPR -> PARTEXPR . == PARTEXPR  index: 1 3    goto: 50
COMPAREEXPR -> PARTEXPR . != PARTEXPR  index: 1 3    goto: 51
COMPUTEEXPR -> PARTEXPR . + PARTEXPR  index: 1 3    goto: 42
COMPUTEEXPR -> PARTEXPR . - PARTEXPR  index: 1 3    goto: 43
COMPUTEEXPR -> PARTEXPR . * PARTEXPR  index: 1 3    goto: 44
COMPUTEEXPR -> PARTEXPR . / PARTEXPR  index: 1 3    goto: 45
COMPUTEEXPR -> PARTEXPR . ++  index: 1 2    goto: 52
COMPUTEEXPR -> PARTEXPR . --  index: 1 2    goto: 53
==>> state: 57
BOOLEXPR -> BOOLEXPR BOOLEXPR .   index: 2 2    goto: -2
BOOLEXPR -> BOOLEXPR . BOOLEXPR  index: 1 2    goto: 57
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 55
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 55
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 57
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 56
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 36
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 36
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 54
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 36
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 36
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 56
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 56
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
Reduce: BOOLEXPR -> BOOLEXPR BOOLEXPR
Reduce: TYPE -> EPSILON
==>> state: 58
STATEMENT -> DO { . LABEL STATEMENTLIST } WHILE ( LABEL CONDITION )  index: 2 10    goto: 87
LABEL -> EPSILON .   index: 1 1    goto: -2
Reduce: LABEL -> EPSILON
==>> state: 59
PARTEXPR -> ( EXPRESSION . )  index: 2 3    goto: 88
==>> state: 60
ASSIGN -> FUN .   index: 1 1    goto: -2
Reduce: ASSIGN -> FUN
==>> state: 61
FUN -> FUNCTION . ( EXPRESSIONLIST ) { STATEMENTLIST }  index: 1 7    goto: 89
FUN -> FUNCTION . ( EXPRESSIONLIST )  index: 1 4    goto: 89
==>> state: 62
ASSIGN -> EXPRESSION .   index: 1 1    goto: -2
Reduce: ASSIGN -> EXPRESSION
==>> state: 63
ASSIGN -> INT .   index: 1 1    goto: -2
PARTEXPR -> INT .   index: 1 1    goto: -2
Reduce: ASSIGN -> INT
Reduce: PARTEXPR -> INT
==>> state: 64
ASSIGN -> IDENTIFIER . ( EXPRESSIONLIST )  index: 1 4    goto: 90
PARTEXPR -> IDENTIFIER .   index: 1 1    goto: -2
Reduce: PARTEXPR -> IDENTIFIER
==>> state: 65
STATEMENT -> VARIABLE = ASSIGN .   index: 3 3    goto: -2
Reduce: STATEMENT -> VARIABLE = ASSIGN
==>> state: 66
PARTEXPR -> VARIABLE ( EXPRESSIONLIST . )  index: 3 4    goto: 91
EXPRESSIONLIST -> EXPRESSIONLIST . , EXPRESSION  index: 1 3    goto: 39
==>> state: 67
INDEX -> VARIABLE .   index: 1 1    goto: -2
VARIABLE -> VARIABLE . [ INDEX ]  index: 1 4    goto: 30
VARIABLE -> VARIABLE . [ INDEX ] [ INDEX ]  index: 1 7    goto: 30
Reduce: INDEX -> VARIABLE
==>> state: 68
INDEX -> INT .   index: 1 1    goto: -2
Reduce: INDEX -> INT
==>> state: 69
VARIABLE -> VARIABLE [ INDEX . ]  index: 3 4    goto: 92
VARIABLE -> VARIABLE [ INDEX . ] [ INDEX ]  index: 3 7    goto: 92
==>> state: 70
IFSTMT -> IF ( CONDITION . ) LABEL IFBLOCK LABEL ELIFSTMT  index: 3 8    goto: 93
==>> state: 71
STATEMENT -> REPEAT { STATEMENTLIST . } UNTIL ( CONDITION )  index: 3 8    goto: 94
STATEMENTLIST -> STATEMENTLIST . STATEMENT  index: 1 2    goto: 38
STATEMENT ->  . VARIABLE  index: 0 1    goto: 2
STATEMENT ->  . VARIABLE = ASSIGN  index: 0 3    goto: 2
STATEMENT ->  . EXPRESSIONLIST  index: 0 1    goto: 18
STATEMENT ->  . IFSTMT  index: 0 1    goto: 4
STATEMENT ->  . REPEAT { STATEMENTLIST } UNTIL ( CONDITION )  index: 0 8    goto: 13
STATEMENT ->  . DO { LABEL STATEMENTLIST } WHILE ( LABEL CONDITION )  index: 0 10    goto: 24
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) { STATEMENTLIST }  index: 0 7    goto: 14
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) STATEMENT  index: 0 5    goto: 14
STATEMENT ->  . RETURN EXPRESSION  index: 0 2    goto: 16
STATEMENT ->  . BREAK ;  index: 0 2    goto: 15
STATEMENT ->  . ;  index: 0 1    goto: 26
STATEMENT ->  . #  index: 0 1    goto: 27
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 2
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 2
EXPRESSIONLIST ->  . EXPRESSION  index: 0 1    goto: 5
EXPRESSIONLIST ->  . EXPRESSIONLIST , EXPRESSION  index: 0 3    goto: 18
IFSTMT ->  . IF ( CONDITION ) LABEL IFBLOCK LABEL ELIFSTMT  index: 0 8    goto: 12
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
EXPRESSION ->  . COMPUTEEXPR  index: 0 1    goto: 19
EXPRESSION ->  . PARTEXPR  index: 0 1    goto: 22
EXPRESSION ->  . CONDITION  index: 0 1    goto: 21
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 22
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 22
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 2
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 2
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 19
CONDITION ->  . COMPAREEXPR  index: 0 1    goto: 20
CONDITION ->  . BOOLEXPR  index: 0 1    goto: 23
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 22
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 23
Reduce: TYPE -> EPSILON
==>> state: 72
EXPRESSIONLISTVAR -> EXPRESSION .   index: 1 1    goto: -2
Reduce: EXPRESSIONLISTVAR -> EXPRESSION
==>> state: 73
STATEMENT -> FOR ( EXPRESSIONLISTVAR . ) { STATEMENTLIST }  index: 3 7    goto: 95
STATEMENT -> FOR ( EXPRESSIONLISTVAR . ) STATEMENT  index: 3 5    goto: 95
EXPRESSIONLISTVAR -> EXPRESSIONLISTVAR . ; EXPRESSION  index: 1 3    goto: 96
==>> state: 74
EXPRESSIONLIST -> EXPRESSIONLIST , EXPRESSION .   index: 3 3    goto: -2
Reduce: EXPRESSIONLIST -> EXPRESSIONLIST , EXPRESSION
==>> state: 75
BOOLEXPR -> COMPAREEXPR && COMPAREEXPR .   index: 3 3    goto: -2
Reduce: BOOLEXPR -> COMPAREEXPR && COMPAREEXPR
==>> state: 76
BOOLEXPR -> COMPAREEXPR || COMPAREEXPR .   index: 3 3    goto: -2
Reduce: BOOLEXPR -> COMPAREEXPR || COMPAREEXPR
==>> state: 77
COMPUTEEXPR -> PARTEXPR + PARTEXPR .   index: 3 3    goto: -2
COMPUTEEXPR -> PARTEXPR . + PARTEXPR  index: 1 3    goto: 42
COMPUTEEXPR -> PARTEXPR . - PARTEXPR  index: 1 3    goto: 43
COMPUTEEXPR -> PARTEXPR . * PARTEXPR  index: 1 3    goto: 44
COMPUTEEXPR -> PARTEXPR . / PARTEXPR  index: 1 3    goto: 45
COMPUTEEXPR -> PARTEXPR . ++  index: 1 2    goto: 52
COMPUTEEXPR -> PARTEXPR . --  index: 1 2    goto: 53
Reduce: COMPUTEEXPR -> PARTEXPR + PARTEXPR
==>> state: 78
COMPUTEEXPR -> PARTEXPR - PARTEXPR .   index: 3 3    goto: -2
COMPUTEEXPR -> PARTEXPR . + PARTEXPR  index: 1 3    goto: 42
COMPUTEEXPR -> PARTEXPR . - PARTEXPR  index: 1 3    goto: 43
COMPUTEEXPR -> PARTEXPR . * PARTEXPR  index: 1 3    goto: 44
COMPUTEEXPR -> PARTEXPR . / PARTEXPR  index: 1 3    goto: 45
COMPUTEEXPR -> PARTEXPR . ++  index: 1 2    goto: 52
COMPUTEEXPR -> PARTEXPR . --  index: 1 2    goto: 53
Reduce: COMPUTEEXPR -> PARTEXPR - PARTEXPR
==>> state: 79
COMPUTEEXPR -> PARTEXPR * PARTEXPR .   index: 3 3    goto: -2
COMPUTEEXPR -> PARTEXPR . + PARTEXPR  index: 1 3    goto: 42
COMPUTEEXPR -> PARTEXPR . - PARTEXPR  index: 1 3    goto: 43
COMPUTEEXPR -> PARTEXPR . * PARTEXPR  index: 1 3    goto: 44
COMPUTEEXPR -> PARTEXPR . / PARTEXPR  index: 1 3    goto: 45
COMPUTEEXPR -> PARTEXPR . ++  index: 1 2    goto: 52
COMPUTEEXPR -> PARTEXPR . --  index: 1 2    goto: 53
Reduce: COMPUTEEXPR -> PARTEXPR * PARTEXPR
==>> state: 80
COMPUTEEXPR -> PARTEXPR / PARTEXPR .   index: 3 3    goto: -2
COMPUTEEXPR -> PARTEXPR . + PARTEXPR  index: 1 3    goto: 42
COMPUTEEXPR -> PARTEXPR . - PARTEXPR  index: 1 3    goto: 43
COMPUTEEXPR -> PARTEXPR . * PARTEXPR  index: 1 3    goto: 44
COMPUTEEXPR -> PARTEXPR . / PARTEXPR  index: 1 3    goto: 45
COMPUTEEXPR -> PARTEXPR . ++  index: 1 2    goto: 52
COMPUTEEXPR -> PARTEXPR . --  index: 1 2    goto: 53
Reduce: COMPUTEEXPR -> PARTEXPR / PARTEXPR
==>> state: 81
COMPAREEXPR -> PARTEXPR < PARTEXPR .   index: 3 3    goto: -2
COMPUTEEXPR -> PARTEXPR . + PARTEXPR  index: 1 3    goto: 42
COMPUTEEXPR -> PARTEXPR . - PARTEXPR  index: 1 3    goto: 43
COMPUTEEXPR -> PARTEXPR . * PARTEXPR  index: 1 3    goto: 44
COMPUTEEXPR -> PARTEXPR . / PARTEXPR  index: 1 3    goto: 45
COMPUTEEXPR -> PARTEXPR . ++  index: 1 2    goto: 52
COMPUTEEXPR -> PARTEXPR . --  index: 1 2    goto: 53
Reduce: COMPAREEXPR -> PARTEXPR < PARTEXPR
==>> state: 82
COMPAREEXPR -> PARTEXPR > PARTEXPR .   index: 3 3    goto: -2
COMPUTEEXPR -> PARTEXPR . + PARTEXPR  index: 1 3    goto: 42
COMPUTEEXPR -> PARTEXPR . - PARTEXPR  index: 1 3    goto: 43
COMPUTEEXPR -> PARTEXPR . * PARTEXPR  index: 1 3    goto: 44
COMPUTEEXPR -> PARTEXPR . / PARTEXPR  index: 1 3    goto: 45
COMPUTEEXPR -> PARTEXPR . ++  index: 1 2    goto: 52
COMPUTEEXPR -> PARTEXPR . --  index: 1 2    goto: 53
Reduce: COMPAREEXPR -> PARTEXPR > PARTEXPR
==>> state: 83
COMPAREEXPR -> PARTEXPR <= PARTEXPR .   index: 3 3    goto: -2
COMPUTEEXPR -> PARTEXPR . + PARTEXPR  index: 1 3    goto: 42
COMPUTEEXPR -> PARTEXPR . - PARTEXPR  index: 1 3    goto: 43
COMPUTEEXPR -> PARTEXPR . * PARTEXPR  index: 1 3    goto: 44
COMPUTEEXPR -> PARTEXPR . / PARTEXPR  index: 1 3    goto: 45
COMPUTEEXPR -> PARTEXPR . ++  index: 1 2    goto: 52
COMPUTEEXPR -> PARTEXPR . --  index: 1 2    goto: 53
Reduce: COMPAREEXPR -> PARTEXPR <= PARTEXPR
==>> state: 84
COMPAREEXPR -> PARTEXPR >= PARTEXPR .   index: 3 3    goto: -2
COMPUTEEXPR -> PARTEXPR . + PARTEXPR  index: 1 3    goto: 42
COMPUTEEXPR -> PARTEXPR . - PARTEXPR  index: 1 3    goto: 43
COMPUTEEXPR -> PARTEXPR . * PARTEXPR  index: 1 3    goto: 44
COMPUTEEXPR -> PARTEXPR . / PARTEXPR  index: 1 3    goto: 45
COMPUTEEXPR -> PARTEXPR . ++  index: 1 2    goto: 52
COMPUTEEXPR -> PARTEXPR . --  index: 1 2    goto: 53
Reduce: COMPAREEXPR -> PARTEXPR >= PARTEXPR
==>> state: 85
COMPAREEXPR -> PARTEXPR == PARTEXPR .   index: 3 3    goto: -2
COMPUTEEXPR -> PARTEXPR . + PARTEXPR  index: 1 3    goto: 42
COMPUTEEXPR -> PARTEXPR . - PARTEXPR  index: 1 3    goto: 43
COMPUTEEXPR -> PARTEXPR . * PARTEXPR  index: 1 3    goto: 44
COMPUTEEXPR -> PARTEXPR . / PARTEXPR  index: 1 3    goto: 45
COMPUTEEXPR -> PARTEXPR . ++  index: 1 2    goto: 52
COMPUTEEXPR -> PARTEXPR . --  index: 1 2    goto: 53
Reduce: COMPAREEXPR -> PARTEXPR == PARTEXPR
==>> state: 86
COMPAREEXPR -> PARTEXPR != PARTEXPR .   index: 3 3    goto: -2
COMPUTEEXPR -> PARTEXPR . + PARTEXPR  index: 1 3    goto: 42
COMPUTEEXPR -> PARTEXPR . - PARTEXPR  index: 1 3    goto: 43
COMPUTEEXPR -> PARTEXPR . * PARTEXPR  index: 1 3    goto: 44
COMPUTEEXPR -> PARTEXPR . / PARTEXPR  index: 1 3    goto: 45
COMPUTEEXPR -> PARTEXPR . ++  index: 1 2    goto: 52
COMPUTEEXPR -> PARTEXPR . --  index: 1 2    goto: 53
Reduce: COMPAREEXPR -> PARTEXPR != PARTEXPR
==>> state: 87
STATEMENT -> DO { LABEL . STATEMENTLIST } WHILE ( LABEL CONDITION )  index: 3 10    goto: 97
STATEMENTLIST ->  . STATEMENT  index: 0 1    goto: 3
STATEMENTLIST ->  . STATEMENTLIST STATEMENT  index: 0 2    goto: 97
STATEMENTLIST -> EPSILON .   index: 1 1    goto: -2
STATEMENT ->  . VARIABLE  index: 0 1    goto: 2
STATEMENT ->  . VARIABLE = ASSIGN  index: 0 3    goto: 2
STATEMENT ->  . EXPRESSIONLIST  index: 0 1    goto: 18
STATEMENT ->  . IFSTMT  index: 0 1    goto: 4
STATEMENT ->  . REPEAT { STATEMENTLIST } UNTIL ( CONDITION )  index: 0 8    goto: 13
STATEMENT ->  . DO { LABEL STATEMENTLIST } WHILE ( LABEL CONDITION )  index: 0 10    goto: 24
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) { STATEMENTLIST }  index: 0 7    goto: 14
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) STATEMENT  index: 0 5    goto: 14
STATEMENT ->  . RETURN EXPRESSION  index: 0 2    goto: 16
STATEMENT ->  . BREAK ;  index: 0 2    goto: 15
STATEMENT ->  . ;  index: 0 1    goto: 26
STATEMENT ->  . #  index: 0 1    goto: 27
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 2
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 2
EXPRESSIONLIST ->  . EXPRESSION  index: 0 1    goto: 5
EXPRESSIONLIST ->  . EXPRESSIONLIST , EXPRESSION  index: 0 3    goto: 18
IFSTMT ->  . IF ( CONDITION ) LABEL IFBLOCK LABEL ELIFSTMT  index: 0 8    goto: 12
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
EXPRESSION ->  . COMPUTEEXPR  index: 0 1    goto: 19
EXPRESSION ->  . PARTEXPR  index: 0 1    goto: 22
EXPRESSION ->  . CONDITION  index: 0 1    goto: 21
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 22
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 22
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 2
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 2
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 19
CONDITION ->  . COMPAREEXPR  index: 0 1    goto: 20
CONDITION ->  . BOOLEXPR  index: 0 1    goto: 23
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 22
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 23
Reduce: STATEMENTLIST -> EPSILON
Reduce: TYPE -> EPSILON
==>> state: 88
PARTEXPR -> ( EXPRESSION ) .   index: 3 3    goto: -2
Reduce: PARTEXPR -> ( EXPRESSION )
==>> state: 89
FUN -> FUNCTION ( . EXPRESSIONLIST ) { STATEMENTLIST }  index: 2 7    goto: 98
FUN -> FUNCTION ( . EXPRESSIONLIST )  index: 2 4    goto: 98
EXPRESSIONLIST ->  . EXPRESSION  index: 0 1    goto: 5
EXPRESSIONLIST ->  . EXPRESSIONLIST , EXPRESSION  index: 0 3    goto: 98
EXPRESSION ->  . COMPUTEEXPR  index: 0 1    goto: 19
EXPRESSION ->  . PARTEXPR  index: 0 1    goto: 22
EXPRESSION ->  . CONDITION  index: 0 1    goto: 21
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 22
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 22
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 36
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 36
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 19
CONDITION ->  . COMPAREEXPR  index: 0 1    goto: 20
CONDITION ->  . BOOLEXPR  index: 0 1    goto: 23
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 36
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 36
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 22
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 23
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
Reduce: TYPE -> EPSILON
==>> state: 90
ASSIGN -> IDENTIFIER ( . EXPRESSIONLIST )  index: 2 4    goto: 99
EXPRESSIONLIST ->  . EXPRESSION  index: 0 1    goto: 5
EXPRESSIONLIST ->  . EXPRESSIONLIST , EXPRESSION  index: 0 3    goto: 99
EXPRESSION ->  . COMPUTEEXPR  index: 0 1    goto: 19
EXPRESSION ->  . PARTEXPR  index: 0 1    goto: 22
EXPRESSION ->  . CONDITION  index: 0 1    goto: 21
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 22
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 22
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 36
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 36
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 19
CONDITION ->  . COMPAREEXPR  index: 0 1    goto: 20
CONDITION ->  . BOOLEXPR  index: 0 1    goto: 23
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 36
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 36
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 22
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 23
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
Reduce: TYPE -> EPSILON
==>> state: 91
PARTEXPR -> VARIABLE ( EXPRESSIONLIST ) .   index: 4 4    goto: -2
Reduce: PARTEXPR -> VARIABLE ( EXPRESSIONLIST )
==>> state: 92
VARIABLE -> VARIABLE [ INDEX ] .   index: 4 4    goto: -2
VARIABLE -> VARIABLE [ INDEX ] . [ INDEX ]  index: 4 7    goto: 100
Reduce: VARIABLE -> VARIABLE [ INDEX ]
==>> state: 93
IFSTMT -> IF ( CONDITION ) . LABEL IFBLOCK LABEL ELIFSTMT  index: 4 8    goto: 101
LABEL -> EPSILON .   index: 1 1    goto: -2
Reduce: LABEL -> EPSILON
==>> state: 94
STATEMENT -> REPEAT { STATEMENTLIST } . UNTIL ( CONDITION )  index: 4 8    goto: 102
==>> state: 95
STATEMENT -> FOR ( EXPRESSIONLISTVAR ) . { STATEMENTLIST }  index: 4 7    goto: 104
STATEMENT -> FOR ( EXPRESSIONLISTVAR ) . STATEMENT  index: 4 5    goto: 103
STATEMENT ->  . VARIABLE  index: 0 1    goto: 2
STATEMENT ->  . VARIABLE = ASSIGN  index: 0 3    goto: 2
STATEMENT ->  . EXPRESSIONLIST  index: 0 1    goto: 18
STATEMENT ->  . IFSTMT  index: 0 1    goto: 4
STATEMENT ->  . REPEAT { STATEMENTLIST } UNTIL ( CONDITION )  index: 0 8    goto: 13
STATEMENT ->  . DO { LABEL STATEMENTLIST } WHILE ( LABEL CONDITION )  index: 0 10    goto: 24
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) { STATEMENTLIST }  index: 0 7    goto: 14
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) STATEMENT  index: 0 5    goto: 14
STATEMENT ->  . RETURN EXPRESSION  index: 0 2    goto: 16
STATEMENT ->  . BREAK ;  index: 0 2    goto: 15
STATEMENT ->  . ;  index: 0 1    goto: 26
STATEMENT ->  . #  index: 0 1    goto: 27
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 2
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 2
EXPRESSIONLIST ->  . EXPRESSION  index: 0 1    goto: 5
EXPRESSIONLIST ->  . EXPRESSIONLIST , EXPRESSION  index: 0 3    goto: 18
IFSTMT ->  . IF ( CONDITION ) LABEL IFBLOCK LABEL ELIFSTMT  index: 0 8    goto: 12
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
EXPRESSION ->  . COMPUTEEXPR  index: 0 1    goto: 19
EXPRESSION ->  . PARTEXPR  index: 0 1    goto: 22
EXPRESSION ->  . CONDITION  index: 0 1    goto: 21
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 22
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 22
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 2
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 2
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 19
CONDITION ->  . COMPAREEXPR  index: 0 1    goto: 20
CONDITION ->  . BOOLEXPR  index: 0 1    goto: 23
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 22
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 23
Reduce: TYPE -> EPSILON
==>> state: 96
EXPRESSIONLISTVAR -> EXPRESSIONLISTVAR ; . EXPRESSION  index: 2 3    goto: 105
EXPRESSION ->  . COMPUTEEXPR  index: 0 1    goto: 19
EXPRESSION ->  . PARTEXPR  index: 0 1    goto: 22
EXPRESSION ->  . CONDITION  index: 0 1    goto: 21
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 22
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 22
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 36
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 36
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 19
CONDITION ->  . COMPAREEXPR  index: 0 1    goto: 20
CONDITION ->  . BOOLEXPR  index: 0 1    goto: 23
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 36
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 36
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 22
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 23
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
Reduce: TYPE -> EPSILON
==>> state: 97
STATEMENT -> DO { LABEL STATEMENTLIST . } WHILE ( LABEL CONDITION )  index: 4 10    goto: 106
STATEMENTLIST -> STATEMENTLIST . STATEMENT  index: 1 2    goto: 38
STATEMENT ->  . VARIABLE  index: 0 1    goto: 2
STATEMENT ->  . VARIABLE = ASSIGN  index: 0 3    goto: 2
STATEMENT ->  . EXPRESSIONLIST  index: 0 1    goto: 18
STATEMENT ->  . IFSTMT  index: 0 1    goto: 4
STATEMENT ->  . REPEAT { STATEMENTLIST } UNTIL ( CONDITION )  index: 0 8    goto: 13
STATEMENT ->  . DO { LABEL STATEMENTLIST } WHILE ( LABEL CONDITION )  index: 0 10    goto: 24
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) { STATEMENTLIST }  index: 0 7    goto: 14
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) STATEMENT  index: 0 5    goto: 14
STATEMENT ->  . RETURN EXPRESSION  index: 0 2    goto: 16
STATEMENT ->  . BREAK ;  index: 0 2    goto: 15
STATEMENT ->  . ;  index: 0 1    goto: 26
STATEMENT ->  . #  index: 0 1    goto: 27
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 2
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 2
EXPRESSIONLIST ->  . EXPRESSION  index: 0 1    goto: 5
EXPRESSIONLIST ->  . EXPRESSIONLIST , EXPRESSION  index: 0 3    goto: 18
IFSTMT ->  . IF ( CONDITION ) LABEL IFBLOCK LABEL ELIFSTMT  index: 0 8    goto: 12
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
EXPRESSION ->  . COMPUTEEXPR  index: 0 1    goto: 19
EXPRESSION ->  . PARTEXPR  index: 0 1    goto: 22
EXPRESSION ->  . CONDITION  index: 0 1    goto: 21
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 22
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 22
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 2
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 2
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 19
CONDITION ->  . COMPAREEXPR  index: 0 1    goto: 20
CONDITION ->  . BOOLEXPR  index: 0 1    goto: 23
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 22
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 23
Reduce: TYPE -> EPSILON
==>> state: 98
FUN -> FUNCTION ( EXPRESSIONLIST . ) { STATEMENTLIST }  index: 3 7    goto: 107
FUN -> FUNCTION ( EXPRESSIONLIST . )  index: 3 4    goto: 107
EXPRESSIONLIST -> EXPRESSIONLIST . , EXPRESSION  index: 1 3    goto: 39
==>> state: 99
ASSIGN -> IDENTIFIER ( EXPRESSIONLIST . )  index: 3 4    goto: 108
EXPRESSIONLIST -> EXPRESSIONLIST . , EXPRESSION  index: 1 3    goto: 39
==>> state: 100
VARIABLE -> VARIABLE [ INDEX ] [ . INDEX ]  index: 5 7    goto: 109
INDEX ->  . INT  index: 0 1    goto: 68
INDEX ->  . VARIABLE  index: 0 1    goto: 67
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 67
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 67
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
Reduce: TYPE -> EPSILON
==>> state: 101
IFSTMT -> IF ( CONDITION ) LABEL . IFBLOCK LABEL ELIFSTMT  index: 5 8    goto: 110
IFBLOCK ->  . STATEMENTLIST  index: 0 1    goto: 111
IFBLOCK ->  . { STATEMENTLIST }  index: 0 3    goto: 112
STATEMENTLIST ->  . STATEMENT  index: 0 1    goto: 3
STATEMENTLIST ->  . STATEMENTLIST STATEMENT  index: 0 2    goto: 111
STATEMENTLIST -> EPSILON .   index: 1 1    goto: -2
STATEMENT ->  . VARIABLE  index: 0 1    goto: 2
STATEMENT ->  . VARIABLE = ASSIGN  index: 0 3    goto: 2
STATEMENT ->  . EXPRESSIONLIST  index: 0 1    goto: 18
STATEMENT ->  . IFSTMT  index: 0 1    goto: 4
STATEMENT ->  . REPEAT { STATEMENTLIST } UNTIL ( CONDITION )  index: 0 8    goto: 13
STATEMENT ->  . DO { LABEL STATEMENTLIST } WHILE ( LABEL CONDITION )  index: 0 10    goto: 24
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) { STATEMENTLIST }  index: 0 7    goto: 14
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) STATEMENT  index: 0 5    goto: 14
STATEMENT ->  . RETURN EXPRESSION  index: 0 2    goto: 16
STATEMENT ->  . BREAK ;  index: 0 2    goto: 15
STATEMENT ->  . ;  index: 0 1    goto: 26
STATEMENT ->  . #  index: 0 1    goto: 27
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 2
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 2
EXPRESSIONLIST ->  . EXPRESSION  index: 0 1    goto: 5
EXPRESSIONLIST ->  . EXPRESSIONLIST , EXPRESSION  index: 0 3    goto: 18
IFSTMT ->  . IF ( CONDITION ) LABEL IFBLOCK LABEL ELIFSTMT  index: 0 8    goto: 12
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
EXPRESSION ->  . COMPUTEEXPR  index: 0 1    goto: 19
EXPRESSION ->  . PARTEXPR  index: 0 1    goto: 22
EXPRESSION ->  . CONDITION  index: 0 1    goto: 21
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 22
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 22
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 2
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 2
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 19
CONDITION ->  . COMPAREEXPR  index: 0 1    goto: 20
CONDITION ->  . BOOLEXPR  index: 0 1    goto: 23
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 22
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 23
Reduce: STATEMENTLIST -> EPSILON
Reduce: TYPE -> EPSILON
==>> state: 102
STATEMENT -> REPEAT { STATEMENTLIST } UNTIL . ( CONDITION )  index: 5 8    goto: 113
==>> state: 103
STATEMENT -> FOR ( EXPRESSIONLISTVAR ) STATEMENT .   index: 5 5    goto: -2
Reduce: STATEMENT -> FOR ( EXPRESSIONLISTVAR ) STATEMENT
==>> state: 104
STATEMENT -> FOR ( EXPRESSIONLISTVAR ) { . STATEMENTLIST }  index: 5 7    goto: 114
STATEMENTLIST ->  . STATEMENT  index: 0 1    goto: 3
STATEMENTLIST ->  . STATEMENTLIST STATEMENT  index: 0 2    goto: 114
STATEMENTLIST -> EPSILON .   index: 1 1    goto: -2
STATEMENT ->  . VARIABLE  index: 0 1    goto: 2
STATEMENT ->  . VARIABLE = ASSIGN  index: 0 3    goto: 2
STATEMENT ->  . EXPRESSIONLIST  index: 0 1    goto: 18
STATEMENT ->  . IFSTMT  index: 0 1    goto: 4
STATEMENT ->  . REPEAT { STATEMENTLIST } UNTIL ( CONDITION )  index: 0 8    goto: 13
STATEMENT ->  . DO { LABEL STATEMENTLIST } WHILE ( LABEL CONDITION )  index: 0 10    goto: 24
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) { STATEMENTLIST }  index: 0 7    goto: 14
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) STATEMENT  index: 0 5    goto: 14
STATEMENT ->  . RETURN EXPRESSION  index: 0 2    goto: 16
STATEMENT ->  . BREAK ;  index: 0 2    goto: 15
STATEMENT ->  . ;  index: 0 1    goto: 26
STATEMENT ->  . #  index: 0 1    goto: 27
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 2
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 2
EXPRESSIONLIST ->  . EXPRESSION  index: 0 1    goto: 5
EXPRESSIONLIST ->  . EXPRESSIONLIST , EXPRESSION  index: 0 3    goto: 18
IFSTMT ->  . IF ( CONDITION ) LABEL IFBLOCK LABEL ELIFSTMT  index: 0 8    goto: 12
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
EXPRESSION ->  . COMPUTEEXPR  index: 0 1    goto: 19
EXPRESSION ->  . PARTEXPR  index: 0 1    goto: 22
EXPRESSION ->  . CONDITION  index: 0 1    goto: 21
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 22
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 22
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 2
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 2
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 19
CONDITION ->  . COMPAREEXPR  index: 0 1    goto: 20
CONDITION ->  . BOOLEXPR  index: 0 1    goto: 23
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 22
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 23
Reduce: STATEMENTLIST -> EPSILON
Reduce: TYPE -> EPSILON
==>> state: 105
EXPRESSIONLISTVAR -> EXPRESSIONLISTVAR ; EXPRESSION .   index: 3 3    goto: -2
Reduce: EXPRESSIONLISTVAR -> EXPRESSIONLISTVAR ; EXPRESSION
==>> state: 106
STATEMENT -> DO { LABEL STATEMENTLIST } . WHILE ( LABEL CONDITION )  index: 5 10    goto: 115
==>> state: 107
FUN -> FUNCTION ( EXPRESSIONLIST ) . { STATEMENTLIST }  index: 4 7    goto: 116
FUN -> FUNCTION ( EXPRESSIONLIST ) .   index: 4 4    goto: -2
Reduce: FUN -> FUNCTION ( EXPRESSIONLIST )
==>> state: 108
ASSIGN -> IDENTIFIER ( EXPRESSIONLIST ) .   index: 4 4    goto: -2
Reduce: ASSIGN -> IDENTIFIER ( EXPRESSIONLIST )
==>> state: 109
VARIABLE -> VARIABLE [ INDEX ] [ INDEX . ]  index: 6 7    goto: 117
==>> state: 110
IFSTMT -> IF ( CONDITION ) LABEL IFBLOCK . LABEL ELIFSTMT  index: 6 8    goto: 118
LABEL -> EPSILON .   index: 1 1    goto: -2
Reduce: LABEL -> EPSILON
==>> state: 111
IFBLOCK -> STATEMENTLIST .   index: 1 1    goto: -2
STATEMENTLIST -> STATEMENTLIST . STATEMENT  index: 1 2    goto: 38
STATEMENT ->  . VARIABLE  index: 0 1    goto: 2
STATEMENT ->  . VARIABLE = ASSIGN  index: 0 3    goto: 2
STATEMENT ->  . EXPRESSIONLIST  index: 0 1    goto: 18
STATEMENT ->  . IFSTMT  index: 0 1    goto: 4
STATEMENT ->  . REPEAT { STATEMENTLIST } UNTIL ( CONDITION )  index: 0 8    goto: 13
STATEMENT ->  . DO { LABEL STATEMENTLIST } WHILE ( LABEL CONDITION )  index: 0 10    goto: 24
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) { STATEMENTLIST }  index: 0 7    goto: 14
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) STATEMENT  index: 0 5    goto: 14
STATEMENT ->  . RETURN EXPRESSION  index: 0 2    goto: 16
STATEMENT ->  . BREAK ;  index: 0 2    goto: 15
STATEMENT ->  . ;  index: 0 1    goto: 26
STATEMENT ->  . #  index: 0 1    goto: 27
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 2
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 2
EXPRESSIONLIST ->  . EXPRESSION  index: 0 1    goto: 5
EXPRESSIONLIST ->  . EXPRESSIONLIST , EXPRESSION  index: 0 3    goto: 18
IFSTMT ->  . IF ( CONDITION ) LABEL IFBLOCK LABEL ELIFSTMT  index: 0 8    goto: 12
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
EXPRESSION ->  . COMPUTEEXPR  index: 0 1    goto: 19
EXPRESSION ->  . PARTEXPR  index: 0 1    goto: 22
EXPRESSION ->  . CONDITION  index: 0 1    goto: 21
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 22
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 22
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 2
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 2
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 19
CONDITION ->  . COMPAREEXPR  index: 0 1    goto: 20
CONDITION ->  . BOOLEXPR  index: 0 1    goto: 23
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 22
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 23
Reduce: IFBLOCK -> STATEMENTLIST
Reduce: TYPE -> EPSILON
==>> state: 112
IFBLOCK -> { . STATEMENTLIST }  index: 1 3    goto: 119
STATEMENTLIST ->  . STATEMENT  index: 0 1    goto: 3
STATEMENTLIST ->  . STATEMENTLIST STATEMENT  index: 0 2    goto: 119
STATEMENTLIST -> EPSILON .   index: 1 1    goto: -2
STATEMENT ->  . VARIABLE  index: 0 1    goto: 2
STATEMENT ->  . VARIABLE = ASSIGN  index: 0 3    goto: 2
STATEMENT ->  . EXPRESSIONLIST  index: 0 1    goto: 18
STATEMENT ->  . IFSTMT  index: 0 1    goto: 4
STATEMENT ->  . REPEAT { STATEMENTLIST } UNTIL ( CONDITION )  index: 0 8    goto: 13
STATEMENT ->  . DO { LABEL STATEMENTLIST } WHILE ( LABEL CONDITION )  index: 0 10    goto: 24
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) { STATEMENTLIST }  index: 0 7    goto: 14
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) STATEMENT  index: 0 5    goto: 14
STATEMENT ->  . RETURN EXPRESSION  index: 0 2    goto: 16
STATEMENT ->  . BREAK ;  index: 0 2    goto: 15
STATEMENT ->  . ;  index: 0 1    goto: 26
STATEMENT ->  . #  index: 0 1    goto: 27
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 2
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 2
EXPRESSIONLIST ->  . EXPRESSION  index: 0 1    goto: 5
EXPRESSIONLIST ->  . EXPRESSIONLIST , EXPRESSION  index: 0 3    goto: 18
IFSTMT ->  . IF ( CONDITION ) LABEL IFBLOCK LABEL ELIFSTMT  index: 0 8    goto: 12
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
EXPRESSION ->  . COMPUTEEXPR  index: 0 1    goto: 19
EXPRESSION ->  . PARTEXPR  index: 0 1    goto: 22
EXPRESSION ->  . CONDITION  index: 0 1    goto: 21
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 22
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 22
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 2
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 2
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 19
CONDITION ->  . COMPAREEXPR  index: 0 1    goto: 20
CONDITION ->  . BOOLEXPR  index: 0 1    goto: 23
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 22
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 23
Reduce: STATEMENTLIST -> EPSILON
Reduce: TYPE -> EPSILON
==>> state: 113
STATEMENT -> REPEAT { STATEMENTLIST } UNTIL ( . CONDITION )  index: 6 8    goto: 120
CONDITION ->  . COMPAREEXPR  index: 0 1    goto: 20
CONDITION ->  . BOOLEXPR  index: 0 1    goto: 23
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 56
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 23
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 36
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 36
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 54
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 36
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 36
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 56
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 56
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
Reduce: TYPE -> EPSILON
==>> state: 114
STATEMENT -> FOR ( EXPRESSIONLISTVAR ) { STATEMENTLIST . }  index: 6 7    goto: 121
STATEMENTLIST -> STATEMENTLIST . STATEMENT  index: 1 2    goto: 38
STATEMENT ->  . VARIABLE  index: 0 1    goto: 2
STATEMENT ->  . VARIABLE = ASSIGN  index: 0 3    goto: 2
STATEMENT ->  . EXPRESSIONLIST  index: 0 1    goto: 18
STATEMENT ->  . IFSTMT  index: 0 1    goto: 4
STATEMENT ->  . REPEAT { STATEMENTLIST } UNTIL ( CONDITION )  index: 0 8    goto: 13
STATEMENT ->  . DO { LABEL STATEMENTLIST } WHILE ( LABEL CONDITION )  index: 0 10    goto: 24
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) { STATEMENTLIST }  index: 0 7    goto: 14
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) STATEMENT  index: 0 5    goto: 14
STATEMENT ->  . RETURN EXPRESSION  index: 0 2    goto: 16
STATEMENT ->  . BREAK ;  index: 0 2    goto: 15
STATEMENT ->  . ;  index: 0 1    goto: 26
STATEMENT ->  . #  index: 0 1    goto: 27
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 2
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 2
EXPRESSIONLIST ->  . EXPRESSION  index: 0 1    goto: 5
EXPRESSIONLIST ->  . EXPRESSIONLIST , EXPRESSION  index: 0 3    goto: 18
IFSTMT ->  . IF ( CONDITION ) LABEL IFBLOCK LABEL ELIFSTMT  index: 0 8    goto: 12
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
EXPRESSION ->  . COMPUTEEXPR  index: 0 1    goto: 19
EXPRESSION ->  . PARTEXPR  index: 0 1    goto: 22
EXPRESSION ->  . CONDITION  index: 0 1    goto: 21
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 22
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 22
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 2
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 2
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 19
CONDITION ->  . COMPAREEXPR  index: 0 1    goto: 20
CONDITION ->  . BOOLEXPR  index: 0 1    goto: 23
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 22
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 23
Reduce: TYPE -> EPSILON
==>> state: 115
STATEMENT -> DO { LABEL STATEMENTLIST } WHILE . ( LABEL CONDITION )  index: 6 10    goto: 122
==>> state: 116
FUN -> FUNCTION ( EXPRESSIONLIST ) { . STATEMENTLIST }  index: 5 7    goto: 123
STATEMENTLIST ->  . STATEMENT  index: 0 1    goto: 3
STATEMENTLIST ->  . STATEMENTLIST STATEMENT  index: 0 2    goto: 123
STATEMENTLIST -> EPSILON .   index: 1 1    goto: -2
STATEMENT ->  . VARIABLE  index: 0 1    goto: 2
STATEMENT ->  . VARIABLE = ASSIGN  index: 0 3    goto: 2
STATEMENT ->  . EXPRESSIONLIST  index: 0 1    goto: 18
STATEMENT ->  . IFSTMT  index: 0 1    goto: 4
STATEMENT ->  . REPEAT { STATEMENTLIST } UNTIL ( CONDITION )  index: 0 8    goto: 13
STATEMENT ->  . DO { LABEL STATEMENTLIST } WHILE ( LABEL CONDITION )  index: 0 10    goto: 24
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) { STATEMENTLIST }  index: 0 7    goto: 14
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) STATEMENT  index: 0 5    goto: 14
STATEMENT ->  . RETURN EXPRESSION  index: 0 2    goto: 16
STATEMENT ->  . BREAK ;  index: 0 2    goto: 15
STATEMENT ->  . ;  index: 0 1    goto: 26
STATEMENT ->  . #  index: 0 1    goto: 27
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 2
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 2
EXPRESSIONLIST ->  . EXPRESSION  index: 0 1    goto: 5
EXPRESSIONLIST ->  . EXPRESSIONLIST , EXPRESSION  index: 0 3    goto: 18
IFSTMT ->  . IF ( CONDITION ) LABEL IFBLOCK LABEL ELIFSTMT  index: 0 8    goto: 12
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
EXPRESSION ->  . COMPUTEEXPR  index: 0 1    goto: 19
EXPRESSION ->  . PARTEXPR  index: 0 1    goto: 22
EXPRESSION ->  . CONDITION  index: 0 1    goto: 21
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 22
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 22
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 2
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 2
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 19
CONDITION ->  . COMPAREEXPR  index: 0 1    goto: 20
CONDITION ->  . BOOLEXPR  index: 0 1    goto: 23
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 22
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 23
Reduce: STATEMENTLIST -> EPSILON
Reduce: TYPE -> EPSILON
==>> state: 117
VARIABLE -> VARIABLE [ INDEX ] [ INDEX ] .   index: 7 7    goto: -2
Reduce: VARIABLE -> VARIABLE [ INDEX ] [ INDEX ]
==>> state: 118
IFSTMT -> IF ( CONDITION ) LABEL IFBLOCK LABEL . ELIFSTMT  index: 7 8    goto: 124
ELIFSTMT ->  . ELSEIF ( CONDITION ) IFBLOCK ELIFSTMT  index: 0 6    goto: 126
ELIFSTMT ->  . ELSE IFBLOCK  index: 0 2    goto: 125
ELIFSTMT -> EPSILON .   index: 1 1    goto: -2
Reduce: ELIFSTMT -> EPSILON
==>> state: 119
IFBLOCK -> { STATEMENTLIST . }  index: 2 3    goto: 127
STATEMENTLIST -> STATEMENTLIST . STATEMENT  index: 1 2    goto: 38
STATEMENT ->  . VARIABLE  index: 0 1    goto: 2
STATEMENT ->  . VARIABLE = ASSIGN  index: 0 3    goto: 2
STATEMENT ->  . EXPRESSIONLIST  index: 0 1    goto: 18
STATEMENT ->  . IFSTMT  index: 0 1    goto: 4
STATEMENT ->  . REPEAT { STATEMENTLIST } UNTIL ( CONDITION )  index: 0 8    goto: 13
STATEMENT ->  . DO { LABEL STATEMENTLIST } WHILE ( LABEL CONDITION )  index: 0 10    goto: 24
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) { STATEMENTLIST }  index: 0 7    goto: 14
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) STATEMENT  index: 0 5    goto: 14
STATEMENT ->  . RETURN EXPRESSION  index: 0 2    goto: 16
STATEMENT ->  . BREAK ;  index: 0 2    goto: 15
STATEMENT ->  . ;  index: 0 1    goto: 26
STATEMENT ->  . #  index: 0 1    goto: 27
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 2
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 2
EXPRESSIONLIST ->  . EXPRESSION  index: 0 1    goto: 5
EXPRESSIONLIST ->  . EXPRESSIONLIST , EXPRESSION  index: 0 3    goto: 18
IFSTMT ->  . IF ( CONDITION ) LABEL IFBLOCK LABEL ELIFSTMT  index: 0 8    goto: 12
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
EXPRESSION ->  . COMPUTEEXPR  index: 0 1    goto: 19
EXPRESSION ->  . PARTEXPR  index: 0 1    goto: 22
EXPRESSION ->  . CONDITION  index: 0 1    goto: 21
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 22
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 22
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 2
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 2
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 19
CONDITION ->  . COMPAREEXPR  index: 0 1    goto: 20
CONDITION ->  . BOOLEXPR  index: 0 1    goto: 23
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 22
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 23
Reduce: TYPE -> EPSILON
==>> state: 120
STATEMENT -> REPEAT { STATEMENTLIST } UNTIL ( CONDITION . )  index: 7 8    goto: 128
==>> state: 121
STATEMENT -> FOR ( EXPRESSIONLISTVAR ) { STATEMENTLIST } .   index: 7 7    goto: -2
Reduce: STATEMENT -> FOR ( EXPRESSIONLISTVAR ) { STATEMENTLIST }
==>> state: 122
STATEMENT -> DO { LABEL STATEMENTLIST } WHILE ( . LABEL CONDITION )  index: 7 10    goto: 129
LABEL -> EPSILON .   index: 1 1    goto: -2
Reduce: LABEL -> EPSILON
==>> state: 123
FUN -> FUNCTION ( EXPRESSIONLIST ) { STATEMENTLIST . }  index: 6 7    goto: 130
STATEMENTLIST -> STATEMENTLIST . STATEMENT  index: 1 2    goto: 38
STATEMENT ->  . VARIABLE  index: 0 1    goto: 2
STATEMENT ->  . VARIABLE = ASSIGN  index: 0 3    goto: 2
STATEMENT ->  . EXPRESSIONLIST  index: 0 1    goto: 18
STATEMENT ->  . IFSTMT  index: 0 1    goto: 4
STATEMENT ->  . REPEAT { STATEMENTLIST } UNTIL ( CONDITION )  index: 0 8    goto: 13
STATEMENT ->  . DO { LABEL STATEMENTLIST } WHILE ( LABEL CONDITION )  index: 0 10    goto: 24
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) { STATEMENTLIST }  index: 0 7    goto: 14
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) STATEMENT  index: 0 5    goto: 14
STATEMENT ->  . RETURN EXPRESSION  index: 0 2    goto: 16
STATEMENT ->  . BREAK ;  index: 0 2    goto: 15
STATEMENT ->  . ;  index: 0 1    goto: 26
STATEMENT ->  . #  index: 0 1    goto: 27
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 2
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 2
EXPRESSIONLIST ->  . EXPRESSION  index: 0 1    goto: 5
EXPRESSIONLIST ->  . EXPRESSIONLIST , EXPRESSION  index: 0 3    goto: 18
IFSTMT ->  . IF ( CONDITION ) LABEL IFBLOCK LABEL ELIFSTMT  index: 0 8    goto: 12
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
EXPRESSION ->  . COMPUTEEXPR  index: 0 1    goto: 19
EXPRESSION ->  . PARTEXPR  index: 0 1    goto: 22
EXPRESSION ->  . CONDITION  index: 0 1    goto: 21
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 22
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 22
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 2
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 2
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 19
CONDITION ->  . COMPAREEXPR  index: 0 1    goto: 20
CONDITION ->  . BOOLEXPR  index: 0 1    goto: 23
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 22
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 23
Reduce: TYPE -> EPSILON
==>> state: 124
IFSTMT -> IF ( CONDITION ) LABEL IFBLOCK LABEL ELIFSTMT .   index: 8 8    goto: -2
Reduce: IFSTMT -> IF ( CONDITION ) LABEL IFBLOCK LABEL ELIFSTMT
==>> state: 125
ELIFSTMT -> ELSE . IFBLOCK  index: 1 2    goto: 131
IFBLOCK ->  . STATEMENTLIST  index: 0 1    goto: 111
IFBLOCK ->  . { STATEMENTLIST }  index: 0 3    goto: 112
STATEMENTLIST ->  . STATEMENT  index: 0 1    goto: 3
STATEMENTLIST ->  . STATEMENTLIST STATEMENT  index: 0 2    goto: 111
STATEMENTLIST -> EPSILON .   index: 1 1    goto: -2
STATEMENT ->  . VARIABLE  index: 0 1    goto: 2
STATEMENT ->  . VARIABLE = ASSIGN  index: 0 3    goto: 2
STATEMENT ->  . EXPRESSIONLIST  index: 0 1    goto: 18
STATEMENT ->  . IFSTMT  index: 0 1    goto: 4
STATEMENT ->  . REPEAT { STATEMENTLIST } UNTIL ( CONDITION )  index: 0 8    goto: 13
STATEMENT ->  . DO { LABEL STATEMENTLIST } WHILE ( LABEL CONDITION )  index: 0 10    goto: 24
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) { STATEMENTLIST }  index: 0 7    goto: 14
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) STATEMENT  index: 0 5    goto: 14
STATEMENT ->  . RETURN EXPRESSION  index: 0 2    goto: 16
STATEMENT ->  . BREAK ;  index: 0 2    goto: 15
STATEMENT ->  . ;  index: 0 1    goto: 26
STATEMENT ->  . #  index: 0 1    goto: 27
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 2
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 2
EXPRESSIONLIST ->  . EXPRESSION  index: 0 1    goto: 5
EXPRESSIONLIST ->  . EXPRESSIONLIST , EXPRESSION  index: 0 3    goto: 18
IFSTMT ->  . IF ( CONDITION ) LABEL IFBLOCK LABEL ELIFSTMT  index: 0 8    goto: 12
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
EXPRESSION ->  . COMPUTEEXPR  index: 0 1    goto: 19
EXPRESSION ->  . PARTEXPR  index: 0 1    goto: 22
EXPRESSION ->  . CONDITION  index: 0 1    goto: 21
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 22
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 22
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 2
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 2
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 19
CONDITION ->  . COMPAREEXPR  index: 0 1    goto: 20
CONDITION ->  . BOOLEXPR  index: 0 1    goto: 23
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 22
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 23
Reduce: STATEMENTLIST -> EPSILON
Reduce: TYPE -> EPSILON
==>> state: 126
ELIFSTMT -> ELSEIF . ( CONDITION ) IFBLOCK ELIFSTMT  index: 1 6    goto: 132
==>> state: 127
IFBLOCK -> { STATEMENTLIST } .   index: 3 3    goto: -2
Reduce: IFBLOCK -> { STATEMENTLIST }
==>> state: 128
STATEMENT -> REPEAT { STATEMENTLIST } UNTIL ( CONDITION ) .   index: 8 8    goto: -2
Reduce: STATEMENT -> REPEAT { STATEMENTLIST } UNTIL ( CONDITION )
==>> state: 129
STATEMENT -> DO { LABEL STATEMENTLIST } WHILE ( LABEL . CONDITION )  index: 8 10    goto: 133
CONDITION ->  . COMPAREEXPR  index: 0 1    goto: 20
CONDITION ->  . BOOLEXPR  index: 0 1    goto: 23
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 56
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 23
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 36
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 36
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 54
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 36
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 36
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 56
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 56
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
Reduce: TYPE -> EPSILON
==>> state: 130
FUN -> FUNCTION ( EXPRESSIONLIST ) { STATEMENTLIST } .   index: 7 7    goto: -2
Reduce: FUN -> FUNCTION ( EXPRESSIONLIST ) { STATEMENTLIST }
==>> state: 131
ELIFSTMT -> ELSE IFBLOCK .   index: 2 2    goto: -2
Reduce: ELIFSTMT -> ELSE IFBLOCK
==>> state: 132
ELIFSTMT -> ELSEIF ( . CONDITION ) IFBLOCK ELIFSTMT  index: 2 6    goto: 134
CONDITION ->  . COMPAREEXPR  index: 0 1    goto: 20
CONDITION ->  . BOOLEXPR  index: 0 1    goto: 23
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 56
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 56
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 23
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 36
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 36
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 54
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 36
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 36
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 56
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 56
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 56
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
Reduce: TYPE -> EPSILON
==>> state: 133
STATEMENT -> DO { LABEL STATEMENTLIST } WHILE ( LABEL CONDITION . )  index: 9 10    goto: 135
==>> state: 134
ELIFSTMT -> ELSEIF ( CONDITION . ) IFBLOCK ELIFSTMT  index: 3 6    goto: 136
==>> state: 135
STATEMENT -> DO { LABEL STATEMENTLIST } WHILE ( LABEL CONDITION ) .   index: 10 10    goto: -2
Reduce: STATEMENT -> DO { LABEL STATEMENTLIST } WHILE ( LABEL CONDITION )
==>> state: 136
ELIFSTMT -> ELSEIF ( CONDITION ) . IFBLOCK ELIFSTMT  index: 4 6    goto: 137
IFBLOCK ->  . STATEMENTLIST  index: 0 1    goto: 111
IFBLOCK ->  . { STATEMENTLIST }  index: 0 3    goto: 112
STATEMENTLIST ->  . STATEMENT  index: 0 1    goto: 3
STATEMENTLIST ->  . STATEMENTLIST STATEMENT  index: 0 2    goto: 111
STATEMENTLIST -> EPSILON .   index: 1 1    goto: -2
STATEMENT ->  . VARIABLE  index: 0 1    goto: 2
STATEMENT ->  . VARIABLE = ASSIGN  index: 0 3    goto: 2
STATEMENT ->  . EXPRESSIONLIST  index: 0 1    goto: 18
STATEMENT ->  . IFSTMT  index: 0 1    goto: 4
STATEMENT ->  . REPEAT { STATEMENTLIST } UNTIL ( CONDITION )  index: 0 8    goto: 13
STATEMENT ->  . DO { LABEL STATEMENTLIST } WHILE ( LABEL CONDITION )  index: 0 10    goto: 24
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) { STATEMENTLIST }  index: 0 7    goto: 14
STATEMENT ->  . FOR ( EXPRESSIONLISTVAR ) STATEMENT  index: 0 5    goto: 14
STATEMENT ->  . RETURN EXPRESSION  index: 0 2    goto: 16
STATEMENT ->  . BREAK ;  index: 0 2    goto: 15
STATEMENT ->  . ;  index: 0 1    goto: 26
STATEMENT ->  . #  index: 0 1    goto: 27
VARIABLE ->  . TYPE IDENTIFIER  index: 0 2    goto: 6
VARIABLE ->  . VARIABLE [ INDEX ]  index: 0 4    goto: 2
VARIABLE ->  . VARIABLE [ INDEX ] [ INDEX ]  index: 0 7    goto: 2
EXPRESSIONLIST ->  . EXPRESSION  index: 0 1    goto: 5
EXPRESSIONLIST ->  . EXPRESSIONLIST , EXPRESSION  index: 0 3    goto: 18
IFSTMT ->  . IF ( CONDITION ) LABEL IFBLOCK LABEL ELIFSTMT  index: 0 8    goto: 12
TYPE ->  . INTEGER  index: 0 1    goto: 7
TYPE ->  . DOUBLE  index: 0 1    goto: 9
TYPE -> EPSILON .   index: 1 1    goto: -2
EXPRESSION ->  . COMPUTEEXPR  index: 0 1    goto: 19
EXPRESSION ->  . PARTEXPR  index: 0 1    goto: 22
EXPRESSION ->  . CONDITION  index: 0 1    goto: 21
COMPUTEEXPR ->  . PARTEXPR + PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR - PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR * PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR / PARTEXPR  index: 0 3    goto: 22
COMPUTEEXPR ->  . PARTEXPR ++  index: 0 2    goto: 22
COMPUTEEXPR ->  . PARTEXPR --  index: 0 2    goto: 22
PARTEXPR ->  . VARIABLE  index: 0 1    goto: 2
PARTEXPR ->  . INT  index: 0 1    goto: 8
PARTEXPR ->  . FLOAT  index: 0 1    goto: 10
PARTEXPR ->  . IDENTIFIER  index: 0 1    goto: 11
PARTEXPR ->  . ( EXPRESSION )  index: 0 3    goto: 25
PARTEXPR ->  . VARIABLE ( EXPRESSIONLIST )  index: 0 4    goto: 2
PARTEXPR ->  . COMPUTEEXPR  index: 0 1    goto: 19
CONDITION ->  . COMPAREEXPR  index: 0 1    goto: 20
CONDITION ->  . BOOLEXPR  index: 0 1    goto: 23
COMPAREEXPR ->  . PARTEXPR < PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR > PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR <= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR >= PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR == PARTEXPR  index: 0 3    goto: 22
COMPAREEXPR ->  . PARTEXPR != PARTEXPR  index: 0 3    goto: 22
BOOLEXPR ->  . COMPAREEXPR && COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . COMPAREEXPR || COMPAREEXPR  index: 0 3    goto: 20
BOOLEXPR ->  . BOOLEXPR BOOLEXPR  index: 0 2    goto: 23
Reduce: STATEMENTLIST -> EPSILON
Reduce: TYPE -> EPSILON
==>> state: 137
ELIFSTMT -> ELSEIF ( CONDITION ) IFBLOCK . ELIFSTMT  index: 5 6    goto: 138
ELIFSTMT ->  . ELSEIF ( CONDITION ) IFBLOCK ELIFSTMT  index: 0 6    goto: 126
ELIFSTMT ->  . ELSE IFBLOCK  index: 0 2    goto: 125
ELIFSTMT -> EPSILON .   index: 1 1    goto: -2
Reduce: ELIFSTMT -> EPSILON
==>> state: 138
ELIFSTMT -> ELSEIF ( CONDITION ) IFBLOCK ELIFSTMT .   index: 6 6    goto: -2
Reduce: ELIFSTMT -> ELSEIF ( CONDITION ) IFBLOCK ELIFSTMT
