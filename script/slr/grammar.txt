program -> statementList
index -> int | variable
type -> integer | double | epsilon
variable -> type identifier | variable [ index ] | variable [ index ] [ index ]
variableList -> variable | variable , variableList

statementList -> statement label statementList | epsilon
statement -> statementNo | statementNo ;
statementNo -> variableList | variable = assign | expressionList | ifStmt | repeat { statementList } until ( condition ) | do { label statementList } while ( label condition ) | for ( expressionListVar ) { statementList } | for ( expressionListVar ) statement | return expression | break | #
assign -> int | expression | fun
fun -> function ( expressionList ) { statementList } | function ( expressionList )

ifStmt -> if ( condition ) label ifBlock gotoLabel label elIfStmt
elIfStmt -> else if ( condition ) ifBlock elIfStmt | else ifBlock | epsilon
ifBlock -> statement | { statementList }

expressionList -> expression | expression , expressionList
expressionListVar -> expression | expression ; expressionListVar

expression -> computeExpr | partExpr | condition
partExpr -> variable | int | float | identifier | partExpr = partExpr | ( expression ) | variable ( expressionList ) | computeExpr
computeExpr -> partExpr + partExpr | partExpr - partExpr | partExpr * partExpr | partExpr / partExpr | partExpr ++ | partExpr --
compareExpr -> partExpr < partExpr | partExpr > partExpr | partExpr <= partExpr | partExpr >= partExpr | partExpr == partExpr | partExpr != partExpr
boolExpr -> compareExpr && compareExpr | compareExpr || label compareExpr | boolExpr boolExpr
condition -> compareExpr | boolExpr

label -> epsilon
gotoLabel -> epsilon
